<h3>util.extend()</h3>

<h4>util.extend( obj1, obj2 [, obj3, ...] )</h4>
<p>Be sure to check <a href="#!inheritance" class="ctn-link">Inheritance</a> first.</p>

<table class="uk-table">
	<tr>
		<th>Arg</th>
		<th>Desc</th>
	</tr>
	<tr>
		<td><code>obj1</code></td>
		<td>The base object, all the next objects inherit from this object.</td>
	</tr>
	<tr>
		<td><code>obj2</code></td>
		<td>It inherits from <code>obj1</code></td>
	</tr>
	<tr>
		<td><code>obj3</code></td>
		<td>It inherits from <code>obj2</code> (which itself inherited from <code>obj1</code>)</td>
	</tr>
</table>

<p>See <a href="https://github.com/m-ahmadi/util.git" target="_blank">util on github</a> for more information.</p>

<pre><code class="language-javascript">
function newPerson(name, age) {
	var inst = {}; // the instance (this)
	
	inst.name = name || 'no_name';
	inst.age  = age  || false;
	
	return inst;
}

function newEmpoloye(name, age, jobTitle, id) {
	var inst = {}, // the instance (this)
		person = newPerson(name, age),
		idCounter = 0;
	
	util.extend( person, inst );
	
	inst.jobTitle  = jobTitle || 'uknown_title';
	inst.employeId = id       || 'employe_'+(idCounter+=1);
	
	return inst;
}

var employee = newEmpoloyee('ali', 26, 'product_manager')

employee.name      // 'ali'
employee.age       // 26
employee.jobTitle  // 'product_manager'
employee .id       // 'employe_1'
	
// You can think of it this way:
class Employee extends Person {
	constructor(name, age, jobTitle, id) {
		// new Person(name, age);
	}
}
</code></pre>